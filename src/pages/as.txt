import React, { useState, useEffect } from 'react';
import { predictRoute, getSymptomsRoute } from '../utils/APIRoutes';

const UserCard = ({ username, userRole }) => (
  <div className="bg-white p-4 rounded-md shadow-md mb-4">
    <h2 className="text-2xl font-bold mb-2 text-gray-800">{username}</h2>
    <p className="text-gray-600">Role: {userRole}</p>
  </div>
);

const Patientdashboard = () => {
  const [userRole, setUserRole] = useState(null);
  const [username, setUsername] = useState(null);
  const [symptomsList, setSymptomsList] = useState([]);
  const [selectedSymptoms, setSelectedSymptoms] = useState([]);
  const [predictedDisease, setPredictedDisease] = useState('');
  const [accuracy, setAccuracy] = useState(null);
  const [algorithm, setAlgorithm] = useState('NaiveBayes');
  const algorithmOptions = ['NaiveBayes', 'DecisionTree', 'RandomForest', 'SVM'];

  useEffect(() => {
    const storedRole = localStorage.getItem('userRole');
    const storedName = localStorage.getItem('userName');

    if (storedRole && storedName) {
      setUserRole(storedRole);
      setUsername(storedName);
    }

    // Fetch symptoms from MongoDB
    const fetchSymptoms = async () => {
      try {
        const response = await fetch(getSymptomsRoute);
        if (response.ok) {
          const symptoms = await response.json();
          setSymptomsList(symptoms);
        
        } else {
          console.error('Failed to fetch symptoms. Server returned:', response.status, response.statusText);
        }
      } catch (error) {
        console.error('Error:', error);
      }
    };

    fetchSymptoms();
  }, []);

  const handleSymptomSelect = (event) => {
    const { options } = event.target;
    const selectedSymptoms = Array.from(options)
      .filter((option) => option.selected)
      .map((option) => option.value);
    setSelectedSymptoms(selectedSymptoms);
  };

  const handleAlgorithmChange = (event) => {
    setAlgorithm(event.target.value);
  };

  const handleSubmit = async () => {
    try {
      const response = await fetch(predictRoute, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          symptoms: selectedSymptoms,
          algorithm: algorithm,
        }),
      });

      console.log('Request Payload:', JSON.stringify({ symptoms: selectedSymptoms, algorithm: algorithm }));

      if (response.ok) {
        const result = await response.json();
        setPredictedDisease(result.predicted_disease);
        setAccuracy(result.accuracy);
      } else {
        console.error('Failed to get prediction. Server returned:', response.status, response.statusText);
      }
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return (
    <div className="flex flex-col h-screen p-2 bg-gray-100">
      <div className="flex flex-col md:flex-row">
        <div className="bg-white rounded-md shadow-md md:w-2/3 p-6 bg-slate-300">
          <h1 className="text-3xl font-bold mb-4 text-gray-800">Welcome to the Patient Dashboard</h1>
          <p className="text-gray-600">This is where you can view and manage your health-related information.</p>

          {/* Disease Prediction Form */}
          <div className="mt-4">
            <h2 className="text-xl font-bold mb-2 text-gray-800">Disease Prediction</h2>
            <form>
              {/* Symptom dropdown */}
              <div className="mb-4">
                <label htmlFor="symptoms" className="block text-gray-700 text-sm font-bold mb-2">
                  Select Symptoms
                </label>
                <select
                  id="symptoms"
                  name="symptoms"
                  multiple
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  onChange={handleSymptomSelect}
                  value={selectedSymptoms}
                >
                  {symptomsList.map((symptom) => (
                    <option key={symptom} value={symptom}>
                      {symptom}
                    </option>
                  ))}
                </select>
              </div>

              {/* Algorithm dropdown */}
              <div className="mb-4">
                <label htmlFor="algorithm" className="block text-gray-700 text-sm font-bold mb-2">
                  Algorithm
                </label>
                <select
                  id="algorithm"
                  name="algorithm"
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  onChange={handleAlgorithmChange}
                  value={algorithm}
                >
                  {algorithmOptions.map((option) => (
                    <option key={option} value={option}>
                      {option}
                    </option>
                  ))}
                </select>
              </div>

              {/* Predict button */}
              <button
                type="button"
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                onClick={handleSubmit}
              >
                Predict Disease
              </button>
            </form>

            {/* Prediction results */}
            {predictedDisease !== null && (
              <div className="mt-4">
                <p className="text-gray-800">
                  Predicted Disease: <strong>{predictedDisease}</strong>
                </p>
                {accuracy !== null && (
                  <p className="text-gray-800">
                    Accuracy: <strong>{(accuracy * 100).toFixed(2)}%</strong>
                  </p>
                )}
              </div>
            )}
          </div>
        </div>
        <div className="md:w-1/4 ml-auto">
          {username && userRole && <UserCard username={username} userRole={userRole} />}
        </div>
      </div>
    </div>
  );
};

export default Patientdashboard;
